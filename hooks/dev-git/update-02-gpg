#!/bin/sh

# --- Command line
refname=${1}
oldrev=${2}
newrev=${3}

# --- Safety check
if [ -z "${GIT_DIR}" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  ${0} <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "${refname}" -o -z "${oldrev}" -o -z "${newrev}" ]; then
	echo "usage: ${0} <ref> <oldrev> <newrev>" >&2
	exit 1
fi

VERIFY_SIGS=$(git config --get gentoo.verify-signatures)
: ${VERIFY_SIGS:=gentoo-devs}

case ${VERIFY_SIGS} in
	gentoo-devs)
		if [[ ${GL_USER} != *@gentoo.org ]]; then
			echo "*** Pusher address is not @gentoo.org" >&2
			echo "    (it is ${GL_USER})" >&2
			echo "*** Please report this to infra" >&2
			exit 1
		fi

		# find key fingerprints in LDAP
		KEY_FPS=$(ldapsearch "uid=${GL_USER%@gentoo.org}" -D '' -Z -LLL \
			gpgfingerprint -o ldif-wrap=no | \
			sed -n -e '/^gpgfingerprint: /{s/^.*://;s/ //g;p}')
		# verify GLEP63 compliance
		HAVE_NONCOMPLIANT=no
		for K in ${KEY_FPS}; do
			LC_CTYPE=en_US.UTF-8 \
			glep63-check -S glep63-2 -k "${K}" || HAVE_NONCOMPLIANT=yes
		done
		if [[ ${HAVE_NONCOMPLIANT} == yes ]]; then
			echo "*** Warning. One or more OpenPGP keys do not comply with GLEP 63." >&2
			echo "    Please update the keys into conformance if you wish to continue" >&2
			echo "    using them. If not, please remove unused keys from LDAP." >&2
		fi
		# create a dedicated GNUPGHOME
		TMPHOME=$(mktemp -d)
		trap 'rm -rf "${TMPHOME}"' EXIT
		# transfer the keys
		gpg -q --export ${KEY_FPS} | GNUPGHOME=${TMPHOME} gpg -q --import
		# use new GNUGPHOME to restrict to dev's keys
		export GNUPGHOME=${TMPHOME}
		;;
	no)
		;;
	*)
		echo "Invalid value of gentoo.verify-signatures" >&2
		exit 1
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"

case ${refname} in
	refs/heads/master)

		IFS='
'

		# verify that everything on the left-hand side of commit history is signed
		# (further branches of merges can be unsigned)
		revs=$(git rev-list --first-parent "${newrev}" "^${oldrev}")
		for r in ${revs}; do
			committer=$(git show -q --pretty=format:'%ce' "${r}")
			if [[ ${VERIFY_SIGS} == gentoo-devs && ${committer} != *@gentoo.org ]]; then
				echo "*** Committer address is not @gentoo.org, refusing"
				exit 1
			fi

			signst=$(git show -q --pretty=format:'%G?' "${r}")
			case ${VERIFY_SIGS} in
				gentoo-devs)
					# gentoo dev signatures must be Good
					[[ ${signst} == G ]] && continue
					;;
				no)
					# additionally skip untrusted/impossible to check
					# when verification is disabled
					[[ ${signst} == [GUE] ]] && continue
					;;
			esac

			# error reporting
			case ${signst} in
				U)
					echo "*** Untrusted signature on ${r}, refusing"
					exit 1
					;;
				B)
					echo "*** Bad signature on ${r}, refusing"
					exit 1
					;;
				N)
					echo "*** No signature on ${r}, refusing"
					exit 1
					;;
				E)
					echo "*** Signature cannot be checked on ${r}, refusing"
					exit 1
					;;
				*)
					echo "*** Unknown signature status '${signst}', refusing"
					exit 1
					;;
			esac
		done

		;;
	*)
		;;
esac

# --- Finished
exit 0
